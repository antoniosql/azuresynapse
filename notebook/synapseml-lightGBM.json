{
	"name": "synapseml-lightGBM",
	"properties": {
		"description": "https://microsoft.github.io/SynapseML/docs/features/lightgbm/LightGBM%20-%20Overview/",
		"folder": {
			"name": "synapseml"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapsespark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "540b0a12-d0da-44a2-ab20-ad2efba59a49"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c3846bb2-f0ac-4dba-a45a-bc4565b3af79/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/synapsevernedev/bigDataPools/synapsespark",
				"name": "synapsespark",
				"type": "Spark",
				"endpoint": "https://synapsevernedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapsespark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Bootstrap Spark Session\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"from synapse.ml.core.platform import *\r\n",
					"\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = (\r\n",
					"    spark.read.format(\"csv\")\r\n",
					"    .option(\"header\", True)\r\n",
					"    .option(\"inferSchema\", True)\r\n",
					"    .load(\r\n",
					"        \"wasbs://publicwasb@mmlspark.blob.core.windows.net/company_bankruptcy_prediction_data.csv\"\r\n",
					"    )\r\n",
					")\r\n",
					"# print dataset size\r\n",
					"print(\"records read: \" + str(df.count()))\r\n",
					"print(\"Schema: \")\r\n",
					"df.printSchema()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"train, test = df.randomSplit([0.85, 0.15], seed=1)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.ml.feature import VectorAssembler\r\n",
					"\r\n",
					"feature_cols = df.columns[1:]\r\n",
					"featurizer = VectorAssembler(inputCols=feature_cols, outputCol=\"features\")\r\n",
					"train_data = featurizer.transform(train)[\"Bankrupt?\", \"features\"]\r\n",
					"test_data = featurizer.transform(test)[\"Bankrupt?\", \"features\"]"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(train_data.groupBy(\"Bankrupt?\").count())"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from synapse.ml.lightgbm import LightGBMClassifier\r\n",
					"\r\n",
					"model = LightGBMClassifier(\r\n",
					"    objective=\"binary\", featuresCol=\"features\", labelCol=\"Bankrupt?\", isUnbalance=True\r\n",
					")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"model = model.fit(train_data)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from synapse.ml.lightgbm import LightGBMClassificationModel\r\n",
					"\r\n",
					"if running_on_synapse():\r\n",
					"    model.saveNativeModel(\"/models/lgbmclassifier.model\")\r\n",
					"    model = LightGBMClassificationModel.loadNativeModelFromFile(\r\n",
					"        \"/models/lgbmclassifier.model\"\r\n",
					"    )\r\n",
					"if running_on_synapse_internal():\r\n",
					"    model.saveNativeModel(\"Files/models/lgbmclassifier.model\")\r\n",
					"    model = LightGBMClassificationModel.loadNativeModelFromFile(\r\n",
					"        \"Files/models/lgbmclassifier.model\"\r\n",
					"    )\r\n",
					"else:\r\n",
					"    model.saveNativeModel(\"/tmp/lgbmclassifier.model\")\r\n",
					"    model = LightGBMClassificationModel.loadNativeModelFromFile(\r\n",
					"        \"/tmp/lgbmclassifier.model\"\r\n",
					"    )"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"feature_importances = model.getFeatureImportances()\r\n",
					"fi = pd.Series(feature_importances, index=feature_cols)\r\n",
					"fi = fi.sort_values(ascending=True)\r\n",
					"f_index = fi.index\r\n",
					"f_values = fi.values\r\n",
					"\r\n",
					"# print feature importances\r\n",
					"print(\"f_index:\", f_index)\r\n",
					"print(\"f_values:\", f_values)\r\n",
					"\r\n",
					"# plot\r\n",
					"x_index = list(range(len(fi)))\r\n",
					"x_index = [x / len(fi) for x in x_index]\r\n",
					"plt.rcParams[\"figure.figsize\"] = (20, 20)\r\n",
					"plt.barh(\r\n",
					"    x_index, f_values, height=0.028, align=\"center\", color=\"tan\", tick_label=f_index\r\n",
					")\r\n",
					"plt.xlabel(\"importances\")\r\n",
					"plt.ylabel(\"features\")\r\n",
					"plt.show()"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"predictions = model.transform(test_data)\r\n",
					"predictions.limit(10).toPandas()"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from synapse.ml.train import ComputeModelStatistics\r\n",
					"\r\n",
					"metrics = ComputeModelStatistics(\r\n",
					"    evaluationMetric=\"classification\",\r\n",
					"    labelCol=\"Bankrupt?\",\r\n",
					"    scoredLabelsCol=\"prediction\",\r\n",
					").transform(predictions)\r\n",
					"display(metrics)"
				],
				"execution_count": 12
			}
		]
	}
}