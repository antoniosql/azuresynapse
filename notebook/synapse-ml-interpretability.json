{
	"name": "synapse-ml-interpretability",
	"properties": {
		"description": "https://microsoft.github.io/SynapseML/docs/features/responsible_ai/Interpretability%20-%20Explanation%20Dashboard/",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapsespark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "256afe4a-f63f-4349-92ed-79577cdac63d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c3846bb2-f0ac-4dba-a45a-bc4565b3af79/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/synapsevernedev/bigDataPools/synapsespark",
				"name": "synapsespark",
				"type": "Spark",
				"endpoint": "https://synapsevernedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapsespark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark\r\n",
					"from IPython import get_ipython\r\n",
					"from IPython.terminal.interactiveshell import TerminalInteractiveShell\r\n",
					"from synapse.ml.explainers import *\r\n",
					"from pyspark.ml import Pipeline\r\n",
					"from pyspark.ml.classification import LogisticRegression\r\n",
					"from pyspark.ml.feature import StringIndexer, OneHotEncoder, VectorAssembler\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"import pandas as pd\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Bootstrap Spark Session\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"from synapse.ml.core.platform import running_on_synapse\r\n",
					"\r\n",
					"#if running_on_synapse():\r\n",
					" #   shell = TerminalInteractiveShell.instance()\r\n",
					"  #  shell.define_macro(\"foo\", \"\"\"a,b=10,20\"\"\")\r\n",
					"   # from notebookutils.visualization import display\r\n",
					"\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vec_access = udf(lambda v, i: float(v[i]), FloatType())\r\n",
					"vec2array = udf(lambda vec: vec.toArray().tolist(), ArrayType(FloatType()))"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.parquet(\r\n",
					"    \"wasbs://publicwasb@mmlspark.blob.core.windows.net/AdultCensusIncome.parquet\"\r\n",
					").cache()\r\n",
					"\r\n",
					"labelIndexer = StringIndexer(\r\n",
					"    inputCol=\"income\", outputCol=\"label\", stringOrderType=\"alphabetAsc\"\r\n",
					").fit(df)\r\n",
					"print(\"Label index assigment: \" + str(set(zip(labelIndexer.labels, [0, 1]))))\r\n",
					"\r\n",
					"training = labelIndexer.transform(df)\r\n",
					"display(training)\r\n",
					"categorical_features = [\r\n",
					"    \"workclass\",\r\n",
					"    \"education\",\r\n",
					"    \"marital-status\",\r\n",
					"    \"occupation\",\r\n",
					"    \"relationship\",\r\n",
					"    \"race\",\r\n",
					"    \"sex\",\r\n",
					"    \"native-country\",\r\n",
					"]\r\n",
					"categorical_features_idx = [col + \"_idx\" for col in categorical_features]\r\n",
					"categorical_features_enc = [col + \"_enc\" for col in categorical_features]\r\n",
					"numeric_features = [\r\n",
					"    \"age\",\r\n",
					"    \"education-num\",\r\n",
					"    \"capital-gain\",\r\n",
					"    \"capital-loss\",\r\n",
					"    \"hours-per-week\",\r\n",
					"]\r\n",
					"\r\n",
					"strIndexer = StringIndexer(\r\n",
					"    inputCols=categorical_features, outputCols=categorical_features_idx\r\n",
					")\r\n",
					"onehotEnc = OneHotEncoder(\r\n",
					"    inputCols=categorical_features_idx, outputCols=categorical_features_enc\r\n",
					")\r\n",
					"vectAssem = VectorAssembler(\r\n",
					"    inputCols=categorical_features_enc + numeric_features, outputCol=\"features\"\r\n",
					")\r\n",
					"lr = LogisticRegression(featuresCol=\"features\", labelCol=\"label\", weightCol=\"fnlwgt\")\r\n",
					"pipeline = Pipeline(stages=[strIndexer, onehotEnc, vectAssem, lr])\r\n",
					"model = pipeline.fit(training)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"explain_instances = (\r\n",
					"    model.transform(training).orderBy(rand()).limit(5).repartition(200).cache()\r\n",
					")\r\n",
					"display(explain_instances)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"shap = TabularSHAP(\r\n",
					"    inputCols=categorical_features + numeric_features,\r\n",
					"    outputCol=\"shapValues\",\r\n",
					"    numSamples=5000,\r\n",
					"    model=model,\r\n",
					"    targetCol=\"probability\",\r\n",
					"    targetClasses=[1],\r\n",
					"    backgroundData=broadcast(training.orderBy(rand()).limit(100).cache()),\r\n",
					")\r\n",
					"\r\n",
					"shap_df = shap.transform(explain_instances)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"shaps = (\r\n",
					"    shap_df.withColumn(\"probability\", vec_access(col(\"probability\"), lit(1)))\r\n",
					"    .withColumn(\"shapValues\", vec2array(col(\"shapValues\").getItem(0)))\r\n",
					"    .select(\r\n",
					"        [\"shapValues\", \"probability\", \"label\"] + categorical_features + numeric_features\r\n",
					"    )\r\n",
					")\r\n",
					"\r\n",
					"shaps_local = shaps.toPandas()\r\n",
					"shaps_local.sort_values(\"probability\", ascending=False, inplace=True, ignore_index=True)\r\n",
					"pd.set_option(\"display.max_colwidth\", None)\r\n",
					"shaps_local"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"\r\n",
					"features = categorical_features + numeric_features\r\n",
					"features_with_base = [\"Base\"] + features\r\n",
					"\r\n",
					"rows = shaps_local.shape[0]\r\n",
					"\r\n",
					"local_importance_values = shaps_local[[\"shapValues\"]]\r\n",
					"eval_data = shaps_local[features]\r\n",
					"true_y = np.array(shaps_local[[\"label\"]])"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"list_local_importance_values = local_importance_values.values.tolist()\r\n",
					"converted_importance_values = []\r\n",
					"bias = []\r\n",
					"for classarray in list_local_importance_values:\r\n",
					"    for rowarray in classarray:\r\n",
					"        converted_list = rowarray.tolist()\r\n",
					"        bias.append(converted_list[0])\r\n",
					"        # remove the bias from local importance values\r\n",
					"        del converted_list[0]\r\n",
					"        converted_importance_values.append(converted_list)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install --upgrade raiwidgets\r\n",
					"!pip install itsdangerous==2.0.1"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install --upgrade interpret-community"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from interpret_community.adapter import ExplanationAdapter\r\n",
					"\r\n",
					"adapter = ExplanationAdapter(features, classification=True)\r\n",
					"global_explanation = adapter.create_global(\r\n",
					"    converted_importance_values, eval_data, expected_values=bias\r\n",
					")"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# view the global importance values\r\n",
					"global_explanation.global_importance_values"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# view the local importance values\r\n",
					"global_explanation.local_importance_values"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class wrapper(object):\r\n",
					"    def __init__(self, model):\r\n",
					"        self.model = model\r\n",
					"\r\n",
					"    def predict(self, data):\r\n",
					"        sparkdata = spark.createDataFrame(data)\r\n",
					"        return (\r\n",
					"            model.transform(sparkdata)\r\n",
					"            .select(\"prediction\")\r\n",
					"            .toPandas()\r\n",
					"            .values.flatten()\r\n",
					"            .tolist()\r\n",
					"        )\r\n",
					"\r\n",
					"    def predict_proba(self, data):\r\n",
					"        sparkdata = spark.createDataFrame(data)\r\n",
					"        prediction = (\r\n",
					"            model.transform(sparkdata)\r\n",
					"            .select(\"probability\")\r\n",
					"            .toPandas()\r\n",
					"            .values.flatten()\r\n",
					"            .tolist()\r\n",
					"        )\r\n",
					"        proba_list = [vector.values.tolist() for vector in prediction]\r\n",
					"        return proba_list"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# view the explanation in the ExplanationDashboard\r\n",
					"from raiwidgets import ExplanationDashboard\r\n",
					"\r\n",
					"ExplanationDashboard(\r\n",
					"    global_explanation, wrapper(model), dataset=eval_data, true_y=true_y\r\n",
					")"
				],
				"execution_count": 17
			}
		]
	}
}