{
	"name": "synapseml-databalance",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapsespark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b15fe4d0-8de8-47d8-94ef-230bcdb8f3b5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c3846bb2-f0ac-4dba-a45a-bc4565b3af79/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/synapsevernedev/bigDataPools/synapsespark",
				"name": "synapsespark",
				"type": "Spark",
				"endpoint": "https://synapsevernedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapsespark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import matplotlib\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"import numpy as np\r\n",
					"import pyspark.sql.functions as F\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Bootstrap Spark Session\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"from synapse.ml.core.platform import *\r\n",
					"\r\n",
					"#from synapse.ml.core.platform import materializing_display as display"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.parquet(\r\n",
					"    \"wasbs://publicwasb@mmlspark.blob.core.windows.net/AdultCensusIncome.parquet\"\r\n",
					")\r\n",
					"display(df)"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Convert the \"income\" column from {<=50K, >50K} to {0, 1} to represent our binary classification label column\r\n",
					"label_col = \"income\"\r\n",
					"df = df.withColumn(\r\n",
					"    label_col, F.when(F.col(label_col).contains(\"<=50K\"), F.lit(0)).otherwise(F.lit(1))\r\n",
					")"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df.groupBy(\"race\").count())"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df.groupBy(\"sex\").count())"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Choose columns/features to do data balance analysis on\r\n",
					"cols_of_interest = [\"race\", \"sex\"]\r\n",
					"display(df.select(cols_of_interest + [label_col]))"
				],
				"execution_count": 45
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Feature Balance Measure\r\n",
					"nos permiten ver si cada combinación de características sensibles está recibiendo el resultado positivo (predicción verdadera) en tasas iguales.\r\n",
					"En este contexto, definimos una medida de equilibrio de características, también conocida como paridad, para la etiqueta y como la diferencia absoluta entre las métricas de asociación de dos clases sensibles diferentes [xA,xB] con respecto a la métrica de asociación A(xi,y)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from synapse.ml.exploratory import FeatureBalanceMeasure\r\n",
					"\r\n",
					"feature_balance_measures = (\r\n",
					"    FeatureBalanceMeasure()\r\n",
					"    .setSensitiveCols(cols_of_interest)\r\n",
					"    .setLabelCol(label_col)\r\n",
					"    .setVerbose(True)\r\n",
					"    .transform(df)\r\n",
					")\r\n",
					"\r\n",
					"# Sort by Statistical Parity descending for all features\r\n",
					"display(feature_balance_measures.sort(F.abs(\"FeatureBalanceMeasure.dp\").desc()))"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Drill down to feature == \"sex\"\r\n",
					"display(\r\n",
					"    feature_balance_measures.filter(F.col(\"FeatureName\") == \"sex\").sort(\r\n",
					"        F.abs(\"FeatureBalanceMeasure.dp\").desc()\r\n",
					"    )\r\n",
					")"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Drill down to feature == \"race\"\r\n",
					"display(\r\n",
					"    feature_balance_measures.filter(F.col(\"FeatureName\") == \"race\").sort(\r\n",
					"        F.abs(\"FeatureBalanceMeasure.dp\").desc()\r\n",
					"    )\r\n",
					")"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"races = [row[\"race\"] for row in df.groupBy(\"race\").count().select(\"race\").collect()]\r\n",
					"dp_rows = (\r\n",
					"    feature_balance_measures.filter(F.col(\"FeatureName\") == \"race\")\r\n",
					"    .select(\"ClassA\", \"ClassB\", \"FeatureBalanceMeasure.dp\")\r\n",
					"    .collect()\r\n",
					")\r\n",
					"race_dp_values = [(row[\"ClassA\"], row[\"ClassB\"], row[\"dp\"]) for row in dp_rows]\r\n",
					"\r\n",
					"race_dp_array = np.zeros((len(races), len(races)))\r\n",
					"for class_a, class_b, dp_value in race_dp_values:\r\n",
					"    i, j = races.index(class_a), races.index(class_b)\r\n",
					"    dp_value = round(dp_value, 2)\r\n",
					"    race_dp_array[i, j] = dp_value\r\n",
					"    race_dp_array[j, i] = -1 * dp_value\r\n",
					"\r\n",
					"colormap = \"RdBu\"\r\n",
					"dp_min, dp_max = -1.0, 1.0\r\n",
					"\r\n",
					"fig, ax = plt.subplots()\r\n",
					"im = ax.imshow(race_dp_array, vmin=dp_min, vmax=dp_max, cmap=colormap)\r\n",
					"\r\n",
					"cbar = ax.figure.colorbar(im, ax=ax)\r\n",
					"cbar.ax.set_ylabel(\"Statistical Parity\", rotation=-90, va=\"bottom\")\r\n",
					"\r\n",
					"ax.set_xticks(np.arange(len(races)))\r\n",
					"ax.set_yticks(np.arange(len(races)))\r\n",
					"ax.set_xticklabels(races)\r\n",
					"ax.set_yticklabels(races)\r\n",
					"\r\n",
					"plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\r\n",
					"\r\n",
					"for i in range(len(races)):\r\n",
					"    for j in range(len(races)):\r\n",
					"        text = ax.text(j, i, race_dp_array[i, j], ha=\"center\", va=\"center\", color=\"k\")\r\n",
					"\r\n",
					"ax.set_title(\"Statistical Parity of Races in Adult Dataset\")\r\n",
					"fig.tight_layout()\r\n",
					"plt.show()"
				],
				"execution_count": 49
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Paridad estadística:\r\n",
					"\r\n",
					"- Cuando es positivo, significa que la Clase A ve el resultado positivo más que la Clase B.\r\n",
					"- Cuando es negativo, significa que ClassB ve el resultado positivo más que ClassA."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Distribution Balance Measures\r\n",
					"Las medidas de equilibrio de distribución nos permiten comparar nuestros datos con una distribución de referencia (por ejemplo, distribución uniforme). Se calculan por columna sensible y no usan la columna de etiqueta\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from synapse.ml.exploratory import DistributionBalanceMeasure\r\n",
					"\r\n",
					"distribution_balance_measures = (\r\n",
					"    DistributionBalanceMeasure().setSensitiveCols(cols_of_interest).transform(df)\r\n",
					")\r\n",
					"\r\n",
					"# Sort by JS Distance descending\r\n",
					"display(\r\n",
					"    distribution_balance_measures.sort(\r\n",
					"        F.abs(\"DistributionBalanceMeasure.js_dist\").desc()\r\n",
					"    )\r\n",
					")"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"distribution_rows = distribution_balance_measures.collect()\r\n",
					"race_row = [row for row in distribution_rows if row[\"FeatureName\"] == \"race\"][0][\r\n",
					"    \"DistributionBalanceMeasure\"\r\n",
					"]\r\n",
					"sex_row = [row for row in distribution_rows if row[\"FeatureName\"] == \"sex\"][0][\r\n",
					"    \"DistributionBalanceMeasure\"\r\n",
					"]\r\n",
					"\r\n",
					"measures_of_interest = [\r\n",
					"    \"kl_divergence\",\r\n",
					"    \"js_dist\",\r\n",
					"    \"inf_norm_dist\",\r\n",
					"    \"total_variation_dist\",\r\n",
					"    \"wasserstein_dist\",\r\n",
					"]\r\n",
					"race_measures = [round(race_row[measure], 4) for measure in measures_of_interest]\r\n",
					"sex_measures = [round(sex_row[measure], 4) for measure in measures_of_interest]\r\n",
					"\r\n",
					"x = np.arange(len(measures_of_interest))\r\n",
					"width = 0.35\r\n",
					"\r\n",
					"fig, ax = plt.subplots()\r\n",
					"rects1 = ax.bar(x - width / 2, race_measures, width, label=\"Race\")\r\n",
					"rects2 = ax.bar(x + width / 2, sex_measures, width, label=\"Sex\")\r\n",
					"\r\n",
					"ax.set_xlabel(\"Measure\")\r\n",
					"ax.set_ylabel(\"Value\")\r\n",
					"ax.set_title(\"Distribution Balance Measures of Sex and Race in Adult Dataset\")\r\n",
					"ax.set_xticks(x)\r\n",
					"ax.set_xticklabels(measures_of_interest)\r\n",
					"ax.legend()\r\n",
					"\r\n",
					"plt.setp(ax.get_xticklabels(), rotation=20, ha=\"right\", rotation_mode=\"default\")\r\n",
					"\r\n",
					"\r\n",
					"def autolabel(rects):\r\n",
					"    for rect in rects:\r\n",
					"        height = rect.get_height()\r\n",
					"        ax.annotate(\r\n",
					"            \"{}\".format(height),\r\n",
					"            xy=(rect.get_x() + rect.get_width() / 2, height),\r\n",
					"            xytext=(0, 1),  # 1 point vertical offset\r\n",
					"            textcoords=\"offset points\",\r\n",
					"            ha=\"center\",\r\n",
					"            va=\"bottom\",\r\n",
					"        )\r\n",
					"\r\n",
					"\r\n",
					"autolabel(rects1)\r\n",
					"autolabel(rects2)\r\n",
					"\r\n",
					"fig.tight_layout()\r\n",
					"\r\n",
					"plt.show()"
				],
				"execution_count": 51
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Race tiene una distancia JS de 0.5104, mientras que Sex tiene una distancia JS de 0.1217.\r\n",
					"\r\n",
					"Sabiendo que la distancia JS está entre [0, 1] donde 0 significa una distribución perfectamente equilibrada, podemos decir que:\r\n",
					"\r\n",
					"- Hay una mayor disparidad entre varias razas que entre varios sexos en nuestro conjunto de datos.\r\n",
					"- La raza no está ni cerca de una distribución perfectamente equilibrada (es decir, algunas razas se ven MUCHO más que otras en nuestro conjunto de datos).\r\n",
					"- El sexo está bastante cerca de una distribución perfectamente equilibrada."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Aggregate Balance Measures\r\n",
					"Las Medidas de Balance Agregado nos permiten obtener una mayor noción de desigualdad. Se calculan en el conjunto global de columnas sensibles y no usan la columna de etiqueta.\r\n",
					"Estas medidas analizan la distribución de registros en todas las combinaciones de columnas sensibles. Por ejemplo, si Sexo y Raza son columnas sensibles, se intentará cuantificar el desequilibrio en todas las combinaciones: (Masculino, Negro), (Femenino, Blanco), (Masculino, Asiático-Pacific-Islander), etc.\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from synapse.ml.exploratory import AggregateBalanceMeasure\r\n",
					"\r\n",
					"aggregate_balance_measures = (\r\n",
					"    AggregateBalanceMeasure().setSensitiveCols(cols_of_interest).transform(df)\r\n",
					")\r\n",
					"\r\n",
					"display(aggregate_balance_measures)"
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Un índice Atkinson de 0.7779 nos permite saber que el 77.79% de los puntos de datos deben \"perderse\" para tener una participación más equitativa entre nuestras características.\r\n",
					"\r\n",
					"Nos permite saber que nuestro conjunto de datos se inclina hacia la máxima desigualdad, y debemos tomar medidas prácticas para:\r\n",
					"\r\n",
					"- Muestrear los puntos de datos donde apenas se observa el valor de la entidad.\r\n",
					"- Reducir los puntos de datos de muestreo donde el valor de la entidad se observa mucho más que otros."
				]
			}
		]
	}
}