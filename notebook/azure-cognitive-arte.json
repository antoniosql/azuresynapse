{
	"name": "azure-cognitive-arte",
	"properties": {
		"description": "https://learn.microsoft.com/es-es/azure/cognitive-services/big-data/recipes/art-explorer ",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapsespark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7b39ad53-e68c-4eac-bcb7-accab0a454d8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c3846bb2-f0ac-4dba-a45a-bc4565b3af79/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/synapsevernedev/bigDataPools/synapsespark",
				"name": "synapsespark",
				"type": "Spark",
				"endpoint": "https://synapsevernedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapsespark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"![Verne](https://www.vernegroup.com/wp-content/uploads/2021/08/Image-1-1-1.png)\r\n",
					"\r\n",
					"En este ejemplo, usaremos Cognitive Services para agregar anotaciones inteligentes a la colección de acceso abierto del Museo Metropolitano de Arte (MET). Esto nos permitirá crear un motor de búsqueda inteligente mediante Azure Search incluso sin anotaciones manuales"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import os, sys, time, json, requests\r\n",
					"from pyspark.ml import Transformer, Estimator, Pipeline\r\n",
					"from pyspark.ml.feature import SQLTransformer\r\n",
					"from pyspark.sql.functions import lit, udf, col, split"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"VISION_API_KEY = '04d6d07a08ef4b48a0af6047e0a01ed1'\r\n",
					"AZURE_SEARCH_KEY = '8mKkdHmw4bK2ucMWUdpcjroF5MRnzuuyio5UxQRkrtAzSeBrPUTB'\r\n",
					"search_service = \"cognitive-search-gaib\" #nombre del recurso creado\r\n",
					"search_index = \"test\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = spark.read\\\r\n",
					"  .format(\"csv\")\\\r\n",
					"  .option(\"header\", True)\\\r\n",
					"  .load(\"wasbs://publicwasb@mmlspark.blob.core.windows.net/metartworks_sample.csv\")\\\r\n",
					"  .withColumn(\"searchAction\", lit(\"upload\"))\\\r\n",
					"  .withColumn(\"Neighbors\", split(col(\"Neighbors\"), \",\").cast(\"array<string>\"))\\\r\n",
					"  .withColumn(\"Tags\", split(col(\"Tags\"), \",\").cast(\"array<string>\"))\\\r\n",
					"  .limit(25)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(data)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from synapse.ml.cognitive import AnalyzeImage\r\n",
					"from synapse.ml.stages import SelectColumns\r\n",
					"\r\n",
					"\r\n",
					"#define pipeline\r\n",
					"describeImage = (AnalyzeImage()\r\n",
					"  .setSubscriptionKey(VISION_API_KEY)\r\n",
					"  .setLocation(\"eastus\")\r\n",
					"  .setImageUrlCol(\"PrimaryImageUrl\")\r\n",
					"  .setOutputCol(\"RawImageDescription\")\r\n",
					"  .setErrorCol(\"Errors\")\r\n",
					"  .setVisualFeatures([\"Categories\", \"Tags\", \"Description\", \"Faces\", \"ImageType\", \"Color\", \"Adult\"])\r\n",
					"  .setConcurrency(5))\r\n",
					"\r\n",
					"df2 = describeImage.transform(data)\\\r\n",
					"  .select(\"*\", \"RawImageDescription.*\").drop(\"Errors\", \"RawImageDescription\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df2)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from mmlspark.cognitive import *\r\n",
					"df2.writeToAzureSearch(\r\n",
					"  subscriptionKey=AZURE_SEARCH_KEY,\r\n",
					"  actionCol=\"searchAction\",\r\n",
					"  serviceName=search_service,\r\n",
					"  indexName=search_index, #Crea el índice con este nombre\r\n",
					"  keyCol=\"ObjectID\"\r\n",
					")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"url = 'https://{}.search.windows.net/indexes/{}/docs/search?api-version=2019-05-06'.format(search_service, search_index)\r\n",
					"requests.post(url, json={\"search\": \"Glass\"}, headers = {\"api-key\": AZURE_SEARCH_KEY}).json()"
				],
				"execution_count": 12
			}
		]
	}
}