{
	"name": "synapseml-cognitiveservice-text",
	"properties": {
		"folder": {
			"name": "synapseml"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapsespark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2aa64db1-3765-4f7c-bccc-58bcad56aef7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c3846bb2-f0ac-4dba-a45a-bc4565b3af79/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/synapsevernedev/bigDataPools/synapsespark",
				"name": "synapsespark",
				"type": "Spark",
				"endpoint": "https://synapsevernedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapsespark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import synapse.ml\r\n",
					"from synapse.ml.cognitive import *\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Acceso a trav√©s de un linked service\r\n",
					"#cognitive_service_name = \"azurecognitivevernedev\"\r\n",
					"service_key = \"6585e5774e584af5b623157b560eebbf\"\r\n",
					"service_loc=\"westeu\""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create a dataframe that's tied to it's column names\r\n",
					"df = spark.createDataFrame([\r\n",
					"  (\"I am so happy today, its sunny\", \"en-US\"),\r\n",
					"  (\"I am frustrated by this rush hour traffic\", \"en-US\"),\r\n",
					"  (\"The cognitive services on spark aint bad\", \"en-US\"),\r\n",
					"], [\"text\", \"language\"])\r\n",
					"\r\n",
					"# Run the Text Analytics service with options\r\n",
					"sentiment = (\r\n",
					"    TextSentiment()\r\n",
					"    .setTextCol(\"text\")\r\n",
					"    .setLocation(service_loc)\r\n",
					"    .setSubscriptionKey(service_key)\r\n",
					"    .setOutputCol(\"sentiment\")\r\n",
					"    .setErrorCol(\"error\")\r\n",
					"    .setLanguageCol(\"language\")\r\n",
					")\r\n",
					"\r\n",
					"\r\n",
					"# Show the results of your text query in a table format\r\n",
					"#display(sentiment.transform(df).select(\"text\", col(\"sentiment\")[0].getItem(\"score\").alias(\"positive score\")))\r\n",
					"\r\n",
					"#sentiment.transform(df).select(\"text\", col(\"sentiment.document.sentiment\").alias(\"sentiment\")).printSchema()\r\n",
					"\r\n",
					"#sentiment.transform(df)\r\n",
					""
				],
				"execution_count": 38
			}
		]
	}
}